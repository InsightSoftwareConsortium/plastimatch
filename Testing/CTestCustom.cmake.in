set (BROOK_FOUND @BROOK_FOUND@)
set (CMAKE_Fortran_COMPILER_WORKS @CMAKE_Fortran_COMPILER_WORKS@)
set (CUDA_FOUND @CUDA_FOUND@)
set (FFTW_FOUND @FFTW_FOUND@)
set (PLM_PLASTIMATCH_PATH "@PLM_PLASTIMATCH_PATH@")
set (PLM_PLASTIMATCH_PATH_HACK "@PLM_PLASTIMATCH_PATH_HACK@")
set (PLM_REDUCED_TESTS @PLM_REDUCED_TESTS@)
set (PLM_TEST_BSPLINE_FLAVORS @PLM_TEST_BSPLINE_FLAVORS@)
set (PLM_TEST_DICOM @PLM_TEST_DICOM@)
set (PLM_TESTING_BUILD_DIR "@PLM_TESTING_BUILD_DIR@")
set (OPENCL_FOUND @OPENCL_FOUND@)

## If we don't have functioning CUDA, don't run CUDA tests
set (RUN_CUDA_TESTS OFF)
if (CUDA_FOUND)
  execute_process (COMMAND 
    "${PLM_PLASTIMATCH_PATH}/cuda_probe"
    RESULT_VARIABLE CUDA_PROBE_RESULT
    OUTPUT_VARIABLE CUDA_PROBE_STDOUT
    ERROR_VARIABLE CUDA_PROBE_STDERR
    )
  file (WRITE "${PLM_TESTING_BUILD_DIR}/cuda_probe_result.txt"
    "${CUDA_PROBE_RESULT}")
  file (WRITE "${PLM_TESTING_BUILD_DIR}/cuda_probe_stdout.txt"
    "${CUDA_PROBE_STDOUT}")
  file (WRITE "${PLM_TESTING_BUILD_DIR}/cuda_probe_stderr.txt"
    "${CUDA_PROBE_STDERR}")
  string (REGEX MATCH "NOT cuda capable" CUDA_PROBE_NOT_CAPABLE
    "${CUDA_PROBE_STDOUT}")
  if (NOT CUDA_PROBE_RESULT AND NOT CUDA_PROBE_NOT_CAPABLE)
    set (RUN_CUDA_TESTS ON)
  endif ()
endif ()

## If we don't have functioning OpenCL, don't run OpenCL tests
set (RUN_OPENCL_TESTS OFF)
if (OPENCL_FOUND)
  execute_process (COMMAND 
    "${PLM_PLASTIMATCH_PATH}/opencl_probe"
    RESULT_VARIABLE OPENCL_PROBE_RESULT
    OUTPUT_VARIABLE OPENCL_PROBE_STDOUT
    ERROR_VARIABLE OPENCL_PROBE_STDERR
    )
  file (WRITE "${PLM_TESTING_BUILD_DIR}/opencl_probe_result.txt"
    "${OPENCL_PROBE_RESULT}")
  file (WRITE "${PLM_TESTING_BUILD_DIR}/opencl_probe_stdout.txt"
    "${OPENCL_PROBE_STDOUT}")
  file (WRITE "${PLM_TESTING_BUILD_DIR}/opencl_probe_stderr.txt"
    "${OPENCL_PROBE_STDERR}")
  string (REGEX MATCH "Opencl does not work" OPENCL_PROBE_NOT_CAPABLE
    "${OPENCL_PROBE_STDOUT}")
  if (NOT OPENCL_PROBE_RESULT AND NOT OPENCL_PROBE_NOT_CAPABLE)
    set (RUN_OPENCL_TESTS ON)
  endif ()
endif ()

# drr-d doen't work yet
set (CTEST_CUSTOM_TESTS_IGNORE
  ${CTEST_CUSTOM_TESTS_IGNORE}
  "drr-d"
  "drr-d-stats"
  "drr-d-check"
  )

## If we don't have a fortran compiler, don't test bragg_curve
if (NOT CMAKE_Fortran_COMPILER_WORKS)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "bragg-curve"
    "bragg-curve-check"
    )
endif ()

## If we didn't get XiO dicom-rt test data, don't run these tests
if (NOT EXISTS "${PLM_TESTING_BUILD_DIR}/chest-phantom-dicomrt-xio-4.33.02")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-a"
    "plm-convert-dicom-a-stats"
    "plm-convert-dicom-a-check"
    "plm-convert-dicom-b"
    "plm-convert-dicom-b-stats"
    "plm-convert-dicom-b-check"
    "plm-convert-dicom-c"
    "plm-convert-dicom-c-stats"
    "plm-convert-dicom-c-check"
    "plm-convert-dicom-d"
    "plm-convert-dicom-d-stats"
    "plm-convert-dicom-d-check"
    "plm-convert-dicom-e"
    "plm-convert-dicom-f"
    "plm-convert-dicom-f-stats"
    "plm-convert-dicom-f-check"
    "plm-convert-dicom-g"
    "plm-convert-dicom-xio-a"

    "plm-convert-cxt"
    "plm-convert-cxt-stats"
    "plm-convert-cxt-check"
    )
endif ()

## If we didn't get xio test data, don't run xio tests
if (NOT EXISTS "${PLM_TESTING_BUILD_DIR}/chest-phantom-xio-4.33.02")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-xio"
    "plm-convert-xio-stats"
    "plm-convert-xio-check"
    "plm-warp-e"
    "plm-warp-e-stats-1"
    "plm-warp-e-check-1"
    "plm-warp-e-stats-2"
    "plm-warp-e-check-2"
    "plm-warp-e-stats-3"
    "plm-warp-e-check-3"
    "plm-warp-e-stats-4"
    "plm-warp-e-check-4"
    "plm-warp-e-check-5"
    "plm-warp-e-check-6"
    "plm-warp-f"
    "plm-warp-f-stats-1"
    "plm-warp-f-check-1"
    "plm-warp-f-stats-2"
    "plm-warp-f-check-2"
    )
endif ()

## If we didn't get aw (foot) test data, don't run these tests
if (NOT EXISTS "${PLM_TESTING_BUILD_DIR}/foot-dicomrt-aw-4.4")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-aw-a" 
    "plm-convert-dicom-aw-a-stats" 
    "plm-convert-dicom-aw-a-check" 
    "plm-convert-dicom-aw-b" 
    )
endif ()

## If we didn't get cerr test data, don't run these tests
if (NOT EXISTS "${PLM_TESTING_BUILD_DIR}/chest-phantom-dicomrt-CERR4pt0beta2_25_Jan_2011")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-cerr-a" 
    )
endif ()

## If we didn't get pinnacle test data, don't run these tests
if (NOT EXISTS "${PLM_TESTING_BUILD_DIR}//rando-dicomrt-pinnacle3-8.2g")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-pinnacle-a" 
    )
endif ()

## If we didn't get varian fdk test data, don't run these tests
if (NOT EXISTS "${PLM_TESTING_BUILD_DIR}/varian-catphan")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "fdk-cpu-b"
    "fdk-cpu-b-stats"
    "fdk-cpu-b-check"
    "fdk-cpu-c"
    "fdk-cpu-c-stats"
    "fdk-cpu-c-check"
    )
endif ()

## If we didn't get headphantom test data, don't run these tests
if (NOT EXISTS "${PLM_TESTING_BUILD_DIR}/headphantom")
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "fdk-tutorial-a"
    "fdk-tutorial-b"
    "fdk-tutorial-b-stats-1"
    "fdk-tutorial-b-check-1"
    "fdk-tutorial-c"
    "fdk-tutorial-c-stats-1"
    "fdk-tutorial-c-check-1"
    )
endif ()

## If we don't have fftw, don't run these tests
if (NOT FFTW_FOUND)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "fdk-cpu-c"
    "fdk-cpu-c-stats"
    "fdk-cpu-c-check"
    "fdk-tutorial-c"
    "fdk-tutorial-c-stats-1"
    "fdk-tutorial-c-check-1"
    )
endif ()

## If we didn't compile with cuda, don't run these tests
if (NOT RUN_CUDA_TESTS)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "demons-cuda-a"
    "demons-cuda-a-check"
    "drr-cuda"
    "drr-cuda-stats"
    "drr-cuda-check"
    "fdk-cuda-a"
    "fdk-cuda-a-stats"
    "fdk-cuda-a-check"
    "plm-bspline-cuda" 
    "plm-bspline-cuda-stats" 
    "plm-bspline-cuda-check" 
    )
endif ()

## If we didn't compile with opencl, don't run these tests
if (NOT RUN_OPENCL_TESTS)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "drr-opencl"
    "drr-opencl-stats"
    "drr-opencl-check"
    "fdk-opencl-a"
    "fdk-opencl-a-stats"
    "fdk-opencl-a-check"
    ) 
endif ()

## If we didn't compile with brook, don't run these tests
if (NOT BROOK_FOUND)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "fdk-brook"
    "fdk-brook-stats"
    "fdk-brook-check"
    )
endif ()

## If we don't have GDCM 1.X, don't run these tests
if (GDCM_VERSION_1)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "plm-convert-dicom-donut-stats" 
    )
endif ()

## Don't test unused algorithms
if (NOT PLM_TEST_BSPLINE_FLAVORS)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
    "bspline-a"
    "bspline-a-check"
    "bspline-b"
    "bspline-b-check"
    "bspline-d"
    "bspline-d-check"
    "bspline-e"
    "bspline-e-check"
    "bspline-f"
    "bspline-f-check"
    )
endif ()

## Don't delete from the list, comment out instead.
if (PLM_REDUCED_TESTS)
  set (CTEST_CUSTOM_TESTS_IGNORE
    ${CTEST_CUSTOM_TESTS_IGNORE}
#    "donut-1"
    "gauss-1"
    "gauss-2"
    "gauss-3"
    "gauss-4"
    "gauss-5"
    "gauss-6"
    "gauss-ushort-1"
    "gauss-ushort-2"
    "gauss-double-1"
    "gauss-double-2"
    "rect-1"
    "rect-2"
    "rect-3"
    "rect-4"
    "rect-5"
    "sphere-1"
    "sphere-2"
    "bspline-bxf"
    "bspline-bxf-check"
    "bspline-a"
    "bspline-a-check"
    "bspline-b"
    "bspline-b-check"
    "bspline-c"
    "bspline-c-check"
    "bspline-d"
    "bspline-d-check"
    "bspline-e"
    "bspline-e-check"
    "bspline-f"
    "bspline-f-check"
    "bspline-g"
    "bspline-g-check"
    "bspline-h"
    "bspline-h-check"
    "bspline-mi-c-1"
    "bspline-mi-c-1-check"
    "bspline-mi-c-2"
    "bspline-mi-c-2-check"

    "demons-a"
    "demons-a-check"
    "demons-cuda-a"
    "demons-cuda-a-check"

    "drr-a"
    "drr-a-stats"
    "drr-a-check"
    "drr-b"
    "drr-b-stats"
    "drr-b-check"
    "drr-c"
    "drr-c-stats"
    "drr-c-check"
    "drr-cuda"
    "drr-cuda-stats"
    "drr-cuda-check"
    "drr-opencl"
    "drr-opencl-stats"
    "drr-opencl-check"

    "fdk-cpu-a"
    "fdk-cpu-a-stats"
    "fdk-cpu-a-check"
    "fdk-cpu-b"
    "fdk-cpu-b-stats"
    "fdk-cpu-b-check"
    "fdk-cpu-c"
    "fdk-cpu-c-stats"
    "fdk-cpu-c-check"
    "fdk-cuda-a"
    "fdk-cuda-a-stats"
    "fdk-cuda-a-check"
    "fdk-opencl-a"
    "fdk-opencl-a-stats"
    "fdk-opencl-a-check"

    "fdk-tutorial-a"
    "fdk-tutorial-b"
    "fdk-tutorial-b-stats-1"
    "fdk-tutorial-b-check-1"
    "fdk-tutorial-c"
    "fdk-tutorial-c-stats-1"
    "fdk-tutorial-c-check-1"

    "landmark-warp-a"
    "landmark-warp-a-stats-1"
    "landmark-warp-a-check-1"
    "landmark-warp-a-stats-2"
    "landmark-warp-a-check-2"
    "landmark-warp-b"
    "landmark-warp-b-stats-1"
    "landmark-warp-b-check-1"
    "landmark-warp-b-stats-2"
    "landmark-warp-b-check-2"
    "landmark-warp-c"
    "landmark-warp-c-stats-1"
    "landmark-warp-c-check-1"
    "landmark-warp-c-stats-2"
    "landmark-warp-c-check-2"

    "plm-convert-dicom-a"
    "plm-convert-dicom-a-stats"
    "plm-convert-dicom-a-check"
    "plm-convert-dicom-b"
    "plm-convert-dicom-b-stats"
    "plm-convert-dicom-b-check"
    "plm-convert-dicom-c"
    "plm-convert-dicom-c-stats"
    "plm-convert-dicom-c-check"
    "plm-convert-dicom-d"
    "plm-convert-dicom-d-stats"
    "plm-convert-dicom-d-check"
    "plm-convert-dicom-e"
    "plm-convert-dicom-f"
    "plm-convert-dicom-f-stats"
    "plm-convert-dicom-f-check"
    "plm-convert-dicom-g"
    "plm-convert-dicom-h"
    "plm-convert-dicom-h-stats"
    "plm-convert-dicom-h-check"

    "plm-convert-dicom-aw-a"
    "plm-convert-dicom-aw-a-stats"
    "plm-convert-dicom-aw-a-check"
    "plm-convert-dicom-aw-b"
    "plm-convert-dicom-cerr-a"
    "plm-convert-dicom-pinnacle-a"
    "plm-convert-dicom-xio-a"

    "plm-convert-cxt"
    "plm-convert-cxt-stats"
    "plm-convert-cxt-check"
    "plm-convert-xio"
    "plm-convert-xio-stats"
    "plm-convert-xio-check"

    "plm-convert-prefix-fcsv"

    "plm-fill-a"
    "plm-fill-a-stats"
    "plm-fill-a-check"
    "plm-mask-a"
    "plm-mask-a-stats"
    "plm-mask-a-check"

    "plm-usage" 

    "plm-register-align-center"
    "plm-register-align-center-stats"
    "plm-register-align-center-check"
    "plm-register-itk-translation"
    "plm-register-itk-translation-stats"
    "plm-register-itk-translation-check"
    "plm-register-itk-rigid"
    "plm-register-itk-rigid-stats-1"
    "plm-register-itk-rigid-check-1"
    "plm-register-itk-rigid-stats-2"
    "plm-register-itk-rigid-check-2"
    "plm-register-itk-bspline"
    "plm-register-itk-bspline-stats-1"
    "plm-register-itk-bspline-check-1"
    "plm-register-itk-demons"
    "plm-register-itk-demons-check-1"
    "plm-register-itk-demons-stats-2"
    "plm-register-itk-demons-check-2"
    "plm-bspline-single-c"
    "plm-bspline-single-c-stats" 
    "plm-bspline-single-c-check" 
    "plm-bspline-single-h" 
    "plm-bspline-single-h-stats"
    "plm-bspline-single-h-check"
    "plm-bspline-openmp" 
    "plm-bspline-openmp-stats"
    "plm-bspline-openmp-check"
    "plm-bspline-cuda"
    "plm-bspline-cuda-stats"
    "plm-bspline-cuda-check"
    "plm-register-bspline-ushort"
    "plm-register-bspline-ushort-stats"
    "plm-register-bspline-ushort-check"
    "plm-register-bspline-double"
    "plm-register-bspline-double-stats"
    "plm-register-bspline-double-check"
    "plm-register-bspline-itk-output"

    "plm-register-rect-bspline" 
    "plm-register-regularization" 

    "plm-register-compose" 
    "plm-compose-a" 
    "plm-compose-a-warp" 
    "plm-compose-a-stats"
    "plm-compose-a-check"
    "plm-compose-b" 
    "plm-compose-b-warp" 
    "plm-compose-b-stats"
    "plm-compose-b-check"
    "plm-compose-c" 
    "plm-compose-c-warp" 
    "plm-compose-c-stats"
    "plm-compose-c-check"

    "plm-resample-a"

    "plm-warp-pointset-a" 
    "plm-warp-pointset-b" 

    "plm-warp-a"
    "plm-warp-a-stats"
    "plm-warp-a-check"
    "plm-warp-b"
    "plm-warp-b-stats-1"
    "plm-warp-b-check-1"
    "plm-warp-b-stats-2"
    "plm-warp-b-check-2"
    "plm-warp-c"
    "plm-warp-c-stats"
    "plm-warp-c-check"
    "plm-warp-d" 
    "plm-warp-d-stats"
    "plm-warp-d-check"
    "plm-warp-e" 
    "plm-warp-e-stats-1"
    "plm-warp-e-check-1"
    "plm-warp-e-stats-2"
    "plm-warp-e-check-2"
    "plm-warp-e-stats-3"
    "plm-warp-e-check-3"
    "plm-warp-e-stats-4"
    "plm-warp-e-check-4"
    "plm-warp-e-check-5"
    "plm-warp-e-check-6"
    "plm-warp-f" 
    "plm-warp-f-stats-1"
    "plm-warp-f-check-1"
    "plm-warp-f-stats-2"
    "plm-warp-f-check-2"
    "plm-warp-g" 
    "plm-warp-g-stats-1"
    "plm-warp-g-check-1"
    "plm-warp-h" 
    "plm-warp-h-stats-1"
    "plm-warp-h-check-1"
    "plm-warp-i" 
    "plm-warp-i-stats-1"
    "plm-warp-i-check-1"

    "plm-xf-convert-a" 
    "plm-xf-convert-b"
    "plm-xf-convert-c"
    "plm-xf-convert-d"
    "plm-xf-convert-d-warp-1"
    "plm-xf-convert-d-warp-1-stats"
    "plm-xf-convert-d-warp-1-check"
    "plm-xf-convert-d-warp-2"
    "plm-xf-convert-d-warp-2-stats"
    "plm-xf-convert-d-warp-2-check"

    "plm-drr-api-a"
    "plm-registration-api-a"

    "bragg-curve"
    "bragg-curve-check"
    "proton-dose"
    "tps-warp"
    )
endif ()
