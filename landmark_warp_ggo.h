/** @file landmark_warp_ggo.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef LANDMARK_WARP_GGO_H
#define LANDMARK_WARP_GGO_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_LANDMARK_WARP_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_LANDMARK_WARP_PACKAGE "landmark_warp"
#endif

#ifndef CMDLINE_PARSER_LANDMARK_WARP_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_LANDMARK_WARP_PACKAGE_NAME "landmark_warp"
#endif

#ifndef CMDLINE_PARSER_LANDMARK_WARP_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_LANDMARK_WARP_VERSION "version 1.4-beta"
#endif

/** @brief Where the command line options are stored */
struct args_info_landmark_warp
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *full_help_help; /**< @brief Print help, including hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * fixed_landmarks_arg;	/**< @brief Input fixed landmarks.  */
  char * fixed_landmarks_orig;	/**< @brief Input fixed landmarks original value given at command line.  */
  const char *fixed_landmarks_help; /**< @brief Input fixed landmarks help description.  */
  char * moving_landmarks_arg;	/**< @brief Input moving landmarks.  */
  char * moving_landmarks_orig;	/**< @brief Input moving landmarks original value given at command line.  */
  const char *moving_landmarks_help; /**< @brief Input moving landmarks help description.  */
  char * input_xform_arg;	/**< @brief Input landmark xform.  */
  char * input_xform_orig;	/**< @brief Input landmark xform original value given at command line.  */
  const char *input_xform_help; /**< @brief Input landmark xform help description.  */
  char * input_vf_arg;	/**< @brief Input vector field.  */
  char * input_vf_orig;	/**< @brief Input vector field original value given at command line.  */
  const char *input_vf_help; /**< @brief Input vector field help description.  */
  char * input_image_arg;	/**< @brief Input image to warp.  */
  char * input_image_orig;	/**< @brief Input image to warp original value given at command line.  */
  const char *input_image_help; /**< @brief Input image to warp help description.  */
  char * output_image_arg;	/**< @brief Output warped image.  */
  char * output_image_orig;	/**< @brief Output warped image original value given at command line.  */
  const char *output_image_help; /**< @brief Output warped image help description.  */
  char * output_vf_arg;	/**< @brief Output vector field.  */
  char * output_vf_orig;	/**< @brief Output vector field original value given at command line.  */
  const char *output_vf_help; /**< @brief Output vector field help description.  */
  char * algorithm_arg;	/**< @brief Either \"itk\", \"gcs\", or \"nsh\" (default='gcs').  */
  char * algorithm_orig;	/**< @brief Either \"itk\", \"gcs\", or \"nsh\" original value given at command line.  */
  const char *algorithm_help; /**< @brief Either \"itk\", \"gcs\", or \"nsh\" help description.  */
  float radius_arg;	/**< @brief Radius of radial basis function (default='0.0').  */
  char * radius_orig;	/**< @brief Radius of radial basis function original value given at command line.  */
  const char *radius_help; /**< @brief Radius of radial basis function help description.  */
  float stiffness_arg;	/**< @brief Young modulus (default='0.0').  */
  char * stiffness_orig;	/**< @brief Young modulus original value given at command line.  */
  const char *stiffness_help; /**< @brief Young modulus help description.  */
  char * config_arg;	/**< @brief Config file.  */
  char * config_orig;	/**< @brief Config file original value given at command line.  */
  const char *config_help; /**< @brief Config file help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int fixed_landmarks_given ;	/**< @brief Whether fixed-landmarks was given.  */
  unsigned int moving_landmarks_given ;	/**< @brief Whether moving-landmarks was given.  */
  unsigned int input_xform_given ;	/**< @brief Whether input-xform was given.  */
  unsigned int input_vf_given ;	/**< @brief Whether input-vf was given.  */
  unsigned int input_image_given ;	/**< @brief Whether input-image was given.  */
  unsigned int output_image_given ;	/**< @brief Whether output-image was given.  */
  unsigned int output_vf_given ;	/**< @brief Whether output-vf was given.  */
  unsigned int algorithm_given ;	/**< @brief Whether algorithm was given.  */
  unsigned int radius_given ;	/**< @brief Whether radius was given.  */
  unsigned int stiffness_given ;	/**< @brief Whether stiffness was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_landmark_warp_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure args_info_landmark_warp (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure args_info_landmark_warp (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *args_info_landmark_warp_purpose;
/** @brief the usage string of the program */
extern const char *args_info_landmark_warp_usage;
/** @brief all the lines making the help output */
extern const char *args_info_landmark_warp_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *args_info_landmark_warp_full_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_landmark_warp (int argc, char **argv,
  struct args_info_landmark_warp *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_landmark_warp_ext() instead
 */
int cmdline_parser_landmark_warp2 (int argc, char **argv,
  struct args_info_landmark_warp *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_landmark_warp_ext (int argc, char **argv,
  struct args_info_landmark_warp *args_info,
  struct cmdline_parser_landmark_warp_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_landmark_warp_dump(FILE *outfile,
  struct args_info_landmark_warp *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_landmark_warp_file_save(const char *filename,
  struct args_info_landmark_warp *args_info);

/**
 * Print the help
 */
void cmdline_parser_landmark_warp_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void cmdline_parser_landmark_warp_print_full_help(void);
/**
 * Print the version
 */
void cmdline_parser_landmark_warp_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_landmark_warp_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_landmark_warp_params_init(struct cmdline_parser_landmark_warp_params *params);

/**
 * Allocates dynamically a cmdline_parser_landmark_warp_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_landmark_warp_params structure
 */
struct cmdline_parser_landmark_warp_params *cmdline_parser_landmark_warp_params_create(void);

/**
 * Initializes the passed args_info_landmark_warp structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_landmark_warp_init (struct args_info_landmark_warp *args_info);
/**
 * Deallocates the string fields of the args_info_landmark_warp structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_landmark_warp_free (struct args_info_landmark_warp *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_landmark_warp_config_file() instead
 */
int cmdline_parser_landmark_warp_configfile (const char *filename,
  struct args_info_landmark_warp *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_landmark_warp_config_file (const char *filename,
  struct args_info_landmark_warp *args_info,
  struct cmdline_parser_landmark_warp_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_landmark_warp_required (struct args_info_landmark_warp *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* LANDMARK_WARP_GGO_H */
