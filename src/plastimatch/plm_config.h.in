/* -----------------------------------------------------------------------
   See COPYRIGHT.TXT and LICENSE.TXT for copyright and license information
   ----------------------------------------------------------------------- */
#ifndef __plm_config_h__
#define __plm_config_h__

/* ITK 3.20 is missing this */
#if defined __cplusplus
#include <cstddef>
#endif

/* Architecture attributes */
#cmakedefine MACHINE_IS_32_BIT 1
#cmakedefine MACHINE_IS_64_BIT 1

/* Major OSes */
#cmakedefine WIN32 1
#cmakedefine UNIX  1

/* "Special" subclasses of UNIX */
#cmakedefine APPLE  1
#cmakedefine CYGWIN 1
#cmakedefine GNU    1

/* Compiler attributes */
#cmakedefine FORTRAN_COMPILER_FOUND 1
#cmakedefine HAVE_SYS_STAT_H 1
#cmakedefine HAVE_STDINT_H 1
#cmakedefine HAVE_SYS_STAT_H 1
#cmakedefine OPENMP_FOUND 1
#cmakedefine SSE2_FOUND 1
#define CMAKE_SIZEOF_UINT @CMAKE_SIZEOF_UINT@
#define CMAKE_SIZEOF_ULONG @CMAKE_SIZEOF_ULONG@
#define CMAKE_SIZEOF_SIZE_T @CMAKE_SIZEOF_SIZE_T@
#define PLM_BIG_ENDIAN @PLM_BIG_ENDIAN@

/* Plastimatch version attributes */
#cmakedefine PLASTIMATCH_HAVE_BUILD_NUMBER 1
#define PLASTIMATCH_BUILD_NUMBER "@PLASTIMATCH_SVN_VERSION@"
#cmakedefine PLM_DEFAULT_VERSION_STRING "@PLM_DEFAULT_VERSION_STRING@"
#cmakedefine PLM_RELEASE_VERSION_STRING "@PLM_RELEASE_VERSION_STRING@"
#cmakedefine PLM_CONFIG_VERSION_STRING "@PLM_CONFIG_VERSION_STRING@"

/* External libraries */
#cmakedefine BUILD_AGAINST_SLICER3 1
#cmakedefine CUDA_FOUND 1
#cmakedefine DCMTK_FOUND 1
#cmakedefine DCMTK_HAVE_CFUNIX_H 1
#cmakedefine DCMTK_VERSION_36 1
#cmakedefine DLIB_FOUND 1
#cmakedefine FFTW_FOUND 1
#cmakedefine GDCM_FOUND 1
#cmakedefine GDCM_VERSION_1 1
#cmakedefine GDCM_VERSION_2 1
#cmakedefine LIBLBFGS_FOUND 1
#cmakedefine NLOPT_FOUND 1
#cmakedefine OPENCL_FOUND 1
#cmakedefine PANTHEIOS_FOUND 1
#cmakedefine HAVE_GETOPT_LONG 1
#cmakedefine READLINE_FOUND 1
#cmakedefine QT4_FOUND 1

/* User options */
#cmakedefine PLM_BUILD_SHARED_LIBS 1
#cmakedefine PLM_USE_SS_IMAGE_VEC 1
#cmakedefine PLM_CONFIG_ALT_DCOS 1
#cmakedefine PLM_CONFIG_KEYHOLIZE 1
#cmakedefine PLM_CONFIG_PREFER_DCMTK 1
#cmakedefine PLM_CONFIG_ENABLE_LUA 1

/* Needed for dynamic linking */
#cmakedefine PLM_USE_GPU_PLUGINS 1

/* Did we find fortran? -- always true now. */
#define FORTRAN_FOUND 1

/* Dicom attributes */
#cmakedefine PLM_DCM_USE_DCMTK 1

/* ITK attributes */
#cmakedefine ITK_FOUND 1
#cmakedefine ITK_USE_SYSTEM_GDCM 1
#if (ITK_FOUND && !PLM_CUDA_COMPILE)
#include "itkConfigure.h"
#if !defined (ITK_LEGACY_REMOVE)
#define ITK_LEGACY_REMOVE 1 /* Silence MSVC+ITK compiler warnings */
#endif
#if (ITK_VERSION_MAJOR >= 3) && (ITK_VERSION_MINOR >= 10) && defined (ITK_USE_ORIENTED_IMAGE_DIRECTION)
#define PLM_ITK_ORIENTED_IMAGES 1
#endif
#endif

/* Make Microsoft compiler less whiny */
#if _MSC_VER >= 1400
/* 4244 warning convert double to float, etc. */
/* 4251 dll export of std c++ types
   http://msdn.microsoft.com/en-us/library/esew7y1w.aspx */
/* 4305 warning convert double to float, etc. */
/* 4819 warnings generated by itk headers */
/* 4800 warning convert int to bool */
/* 4996 warnings generated when using ISO C library functions 
   (i.e. not using MSVC extensions) 
   N.b. this is disabled globally, not just for plm_config */
#pragma warning( disable : 4244 4251 4305 4800 4819 )
#endif

/* Make GCC compiler less whiny */
#if (__GNUC__ >= 4) && (__GNUC_MINOR__ >= 2) && !defined(NVCC)
/* -Wwrite-strings warnings generated when passing literal strings as 
   (non-const?) function parameters */
#pragma GCC diagnostic ignored "-Wwrite-strings"
/* -Wdepricated warnings generated by itk headers */
#pragma GCC diagnostic ignored "-Wdeprecated"
/* -Wno-sign-conversion warnings are generated when comparing signed 
   and unsigned integers -- these should be revisited occasionally 
   to check for actual bugs. */
/* Unfortunately, the below doesn't actually work.  We still get warnings. */
/* #pragma GCC diagnostic ignored "-Wsign-conversion" */
#endif

#if _MSC_VER
#define inline __inline
#endif

#if defined(__BORLANDC__) || defined(_MSC_VER)
#define snprintf _snprintf
#endif


/* JAS 2012.04.24
 * Plastimatch 2.0 method for demangling symbols */
#ifdef __cplusplus
#define EXTERNC extern "C"
#else
#define EXTERNC
#endif

/* JAS 2012.04.24
 * Plastimatch 2.0 method for exporting API symbols */
// TODO: Switch everything to CMake's WIN32 (remove _WIN32)
//
#if (!defined (BUILD_AGAINST_SLICER3) && (defined(_WIN32) || defined(WIN32)) && (defined (PLM_BUILD_SHARED_LIBS)))
# ifdef SHARING_EXPORTS
#   define API EXTERNC __declspec(dllexport)
# else
#   define API EXTERNC __declspec(dllimport)
# endif
#else
# define API EXTERNC
#endif


/* This code is for exporting symbols when building DLLs on windows */
#if (!defined (BUILD_AGAINST_SLICER3) && (defined(_WIN32) || defined(WIN32)) && (defined (PLM_BUILD_SHARED_LIBS)))
# ifdef gpuit_EXPORTS
#  define gpuit_EXPORT __declspec(dllexport)
# else
#  define gpuit_EXPORT __declspec(dllimport)
# endif
# ifdef plastimatch1_EXPORTS
#  define plastimatch1_EXPORT __declspec(dllexport)
# else
#  define plastimatch1_EXPORT __declspec(dllimport)
# endif
# ifdef plmsys_EXPORTS
#  define plmsys_EXPORT __declspec(dllexport)
# else
#  define plmsys_EXPORT __declspec(dllimport)
# endif
#else
/* unix needs nothing */
#define gpuit_EXPORT 
#define plastimatch1_EXPORT 
#define plmsys_EXPORT
#endif

/* JAS 2011.02.07
 * GPU Plugins are not considered "shared libs"
 * otherwise Win32 build will break when not using "shared libs" */
#if (!defined (BUILD_AGAINST_SLICER3) && (defined(_WIN32) || defined(WIN32)) && (defined (PLM_USE_GPU_PLUGINS)))
#ifdef plmcuda_EXPORTS
#define plmcuda_EXPORT(f, ...)                                     \
   __declspec(dllexport)                                             \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#else
#define plmcuda_EXPORT(f, ...)                                     \
   __declspec(dllimport)                                             \
   f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#endif
#ifdef plmopencl_EXPORTS
#define plmopencl_EXPORT(f, ...)                                   \
   __declspec(dllexport)                                             \
   f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#else
#define plmopencl_EXPORT(f, ...)                                   \
   __declspec(dllimport)                                             \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#endif
#else
#define plmcuda_EXPORT(f, ...)                  \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#define plmopencl_EXPORT(f, ...)                \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#endif

#endif /* __plm_config_h__ */
